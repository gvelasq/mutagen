[{"path":[]},{"path":"https://gvelasq.github.io/mutagen/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://gvelasq.github.io/mutagen/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://gvelasq.github.io/mutagen/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://gvelasq.github.io/mutagen/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://gvelasq.github.io/mutagen/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement package DESCRIPTION. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://gvelasq.github.io/mutagen/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://gvelasq.github.io/mutagen/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://gvelasq.github.io/mutagen/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://gvelasq.github.io/mutagen/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://gvelasq.github.io/mutagen/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://gvelasq.github.io/mutagen/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://gvelasq.github.io/mutagen/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to mutagen","title":"Contributing to mutagen","text":"outlines propose change mutagen. detailed discussion contributing packages, please see tidyverse team’s development contributing guide code review principles.","code":""},{"path":"https://gvelasq.github.io/mutagen/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to mutagen","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://gvelasq.github.io/mutagen/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to mutagen","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See tidyverse team’s guide create great issue advice.","code":""},{"path":"https://gvelasq.github.io/mutagen/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to mutagen","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"gvelasq/mutagen\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://gvelasq.github.io/mutagen/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to mutagen","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://gvelasq.github.io/mutagen/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to mutagen","text":"Please note mutagen project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://gvelasq.github.io/mutagen/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 mutagen authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://gvelasq.github.io/mutagen/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with mutagen","title":"Getting help with mutagen","text":"Thanks using mutagen! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://gvelasq.github.io/mutagen/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with mutagen","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty incredible ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://gvelasq.github.io/mutagen/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with mutagen","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://gvelasq.github.io/mutagen/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with mutagen","text":"efficient possible, development mutagen package tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"https://gvelasq.github.io/mutagen/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gustavo Velásquez. Author, maintainer.","code":""},{"path":"https://gvelasq.github.io/mutagen/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Velásquez G (2025). mutagen: Extensions dplyr's mutate. R package version 0.0.0.9000, https://github.com/gvelasq/mutagen.","code":"@Manual{,   title = {mutagen: Extensions to dplyr's mutate},   author = {Gustavo Velásquez},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://github.com/gvelasq/mutagen}, }"},{"path":"https://gvelasq.github.io/mutagen/index.html","id":"mutagen-","dir":"","previous_headings":"","what":"Extensions to dplyr's mutate","title":"Extensions to dplyr's mutate","text":"issue human time rather silicon chip time. Human time can wasted taking longer write code, (often much importantly) taking time understand subsequently . – R Inferno (Patrick Burns, 2011) goal mutagen provide extensions dplyr’s mutate(). mutagen provides simple--use functions alternatives complex R idioms variable generation. mutagen functions specific problems encountered R (e.g., working list-columns data frame), others solve generic data science operations inspired excellent set egen (‘extensions generate’) functions Stata.","code":""},{"path":"https://gvelasq.github.io/mutagen/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Extensions to dplyr's mutate","text":"can install development version mutagen GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"gvelasq/mutagen\")"},{"path":"https://gvelasq.github.io/mutagen/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Extensions to dplyr's mutate","text":"mutagen functions begin prefix gen_* designed used inside dplyr’s mutate(). mnemonic use mutagen, first mutate generate.","code":""},{"path":"https://gvelasq.github.io/mutagen/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Extensions to dplyr's mutate","text":"Please note mutagen project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://gvelasq.github.io/mutagen/index.html","id":"contributors","dir":"","previous_headings":"","what":"Contributors","title":"Extensions to dplyr's mutate","text":"contributions project gratefully acknowledged using allcontributors package following -contributors specification. Contributions kind welcome!","code":""},{"path":[]},{"path":[]},{"path":"https://gvelasq.github.io/mutagen/reference/gen_na_listcol.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a list-column with NULLs replaced with NAs — gen_na_listcol","title":"Generate a list-column with NULLs replaced with NAs — gen_na_listcol","text":"function takes list replaces NULL values NA. useful working list-columns data frame.","code":""},{"path":"https://gvelasq.github.io/mutagen/reference/gen_na_listcol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a list-column with NULLs replaced with NAs — gen_na_listcol","text":"","code":"gen_na_listcol(x)"},{"path":"https://gvelasq.github.io/mutagen/reference/gen_na_listcol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a list-column with NULLs replaced with NAs — gen_na_listcol","text":"x list list-column modify.","code":""},{"path":"https://gvelasq.github.io/mutagen/reference/gen_na_listcol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a list-column with NULLs replaced with NAs — gen_na_listcol","text":"list NULL values replaced NA.","code":""},{"path":"https://gvelasq.github.io/mutagen/reference/gen_na_listcol.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a list-column with NULLs replaced with NAs — gen_na_listcol","text":"Parallelization supported via purrr::in_parallel().","code":""},{"path":"https://gvelasq.github.io/mutagen/reference/gen_na_listcol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a list-column with NULLs replaced with NAs — gen_na_listcol","text":"","code":"library(dplyr, warn.conflicts = FALSE) a <-   mtcars %>%   select(cyl, vs, am) %>%   slice(1:6) %>%   as_tibble() %>%   mutate(listcol = list(NULL, \"b\", \"c\", \"d\", \"e\", \"f\")) glimpse(a) #> Rows: 6 #> Columns: 4 #> $ cyl     <dbl> 6, 6, 4, 6, 8, 6 #> $ vs      <dbl> 0, 0, 1, 1, 0, 1 #> $ am      <dbl> 1, 1, 1, 0, 0, 0 #> $ listcol <list> <NULL>, \"b\", \"c\", \"d\", \"e\", \"f\" b <-   a %>%   mutate(across(starts_with(\"listcol\"), gen_na_listcol)) glimpse(b) #> Rows: 6 #> Columns: 4 #> $ cyl     <dbl> 6, 6, 4, 6, 8, 6 #> $ vs      <dbl> 0, 0, 1, 1, 0, 1 #> $ am      <dbl> 1, 1, 1, 0, 0, 0 #> $ listcol <list> NA, \"b\", \"c\", \"d\", \"e\", \"f\""},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rowcount.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate rowwise count of columns matching a set of values — gen_rowcount","title":"Generate rowwise count of columns matching a set of values — gen_rowcount","text":"function performs rowwise count columns data frame match set supplied values.","code":""},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rowcount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate rowwise count of columns matching a set of values — gen_rowcount","text":"","code":"gen_rowcount(data, cols, values)"},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rowcount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate rowwise count of columns matching a set of values — gen_rowcount","text":"data data frame. cols <tidy-select> Columns search across. values list values match.","code":""},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rowcount.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate rowwise count of columns matching a set of values — gen_rowcount","text":"integer vector number matched values.","code":""},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rowcount.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate rowwise count of columns matching a set of values — gen_rowcount","text":"Parallelization supported via purrr::in_parallel().","code":""},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rowcount.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate rowwise count of columns matching a set of values — gen_rowcount","text":"","code":"library(dplyr, warn.conflicts = FALSE) a <- tibble(   x = 1:3,   y = rep(NA, 3),   z = letters[1:3],   aa = rep(FALSE, 3) ) val <- list(1, NA, \"a\", FALSE) gen_rowcount(a, values = val) #> [1] 4 2 2 gen_rowcount(a, everything(), values = val) #> [1] 4 2 2 gen_rowcount(a, starts_with(letters[25:26]), values = val) #> [1] 2 1 1 b <- a %>% mutate(q = gen_rowcount(., values = val)) b #> # A tibble: 3 × 5 #>       x y     z     aa        q #>   <int> <lgl> <chr> <lgl> <int> #> 1     1 NA    a     FALSE     4 #> 2     2 NA    b     FALSE     2 #> 3     3 NA    c     FALSE     2"},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rowfirst.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate first rowwise nonmissing value — gen_rowfirst","title":"Generate first rowwise nonmissing value — gen_rowfirst","text":"function returns first rowwise nonmissing value data frame.","code":""},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rowfirst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate first rowwise nonmissing value — gen_rowfirst","text":"","code":"gen_rowfirst(data, cols)"},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rowfirst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate first rowwise nonmissing value — gen_rowfirst","text":"data data frame. cols <tidy-select> Columns search across.","code":""},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rowfirst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate first rowwise nonmissing value — gen_rowfirst","text":"vector first rowwise nonmissing value. vector's type common type rowwise nonmissing values.","code":""},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rowfirst.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate first rowwise nonmissing value — gen_rowfirst","text":"Parallelization supported via purrr::in_parallel().","code":""},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rowfirst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate first rowwise nonmissing value — gen_rowfirst","text":"","code":"library(dplyr, warn.conflicts = FALSE) a <- tibble(   x = c(1, NA, 2),   y = c(NA, 3, NA),   z = c(4, NA, 5) ) gen_rowfirst(a) #> [1] 1 3 2 gen_rowfirst(a, all_of(letters[25:26])) #> [1] 4 3 5 b <- a %>% mutate(q = gen_rowfirst(.)) b #> # A tibble: 3 × 4 #>       x     y     z     q #>   <dbl> <dbl> <dbl> <dbl> #> 1     1    NA     4     1 #> 2    NA     3    NA     3 #> 3     2    NA     5     2 c <-   a %>%   mutate(w = c(\"a\", TRUE, NA), .before = \"x\") %>%   mutate(q = gen_rowfirst(.)) c # note that q is of type <chr> #> # A tibble: 3 × 5 #>   w         x     y     z q     #>   <chr> <dbl> <dbl> <dbl> <chr> #> 1 a         1    NA     4 a     #> 2 TRUE     NA     3    NA TRUE  #> 3 NA        2    NA     5 2"},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rowlast.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate last rowwise nonmissing value — gen_rowlast","title":"Generate last rowwise nonmissing value — gen_rowlast","text":"function returns last rowwise nonmissing value data frame.","code":""},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rowlast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate last rowwise nonmissing value — gen_rowlast","text":"","code":"gen_rowlast(data, cols)"},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rowlast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate last rowwise nonmissing value — gen_rowlast","text":"data data frame. cols <tidy-select> Columns search across.","code":""},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rowlast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate last rowwise nonmissing value — gen_rowlast","text":"vector last rowwise nonmissing value. vector's type common type rowwise nonmissing values.","code":""},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rowlast.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate last rowwise nonmissing value — gen_rowlast","text":"Parallelization supported via purrr::in_parallel().","code":""},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rowlast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate last rowwise nonmissing value — gen_rowlast","text":"","code":"library(dplyr, warn.conflicts = FALSE) a <- tibble(   x = c(1, NA, 2),   y = c(NA, 3, NA),   z = c(4, NA, 5) ) gen_rowlast(a) #> [1] 4 3 5 gen_rowlast(a, all_of(letters[24:25])) #> [1] 1 3 2 b <- a %>% mutate(q = gen_rowlast(.)) b #> # A tibble: 3 × 4 #>       x     y     z     q #>   <dbl> <dbl> <dbl> <dbl> #> 1     1    NA     4     4 #> 2    NA     3    NA     3 #> 3     2    NA     5     5 c <-   a %>%   mutate(aa = c(\"a\", TRUE, NA), .after = \"z\") %>%   mutate(q = gen_rowlast(.)) c # note that q is of type <chr> #> # A tibble: 3 × 5 #>       x     y     z aa    q     #>   <dbl> <dbl> <dbl> <chr> <chr> #> 1     1    NA     4 a     a     #> 2    NA     3    NA TRUE  TRUE  #> 3     2    NA     5 NA    5"},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rowmatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate rowwise match of a set of values — gen_rowmatch","title":"Generate rowwise match of a set of values — gen_rowmatch","text":"function performs rowwise match set supplied values across columns data frame. row values equal one supplied values, function returns integer 1 (1L) row, otherwise returns integer 0 (0L).","code":""},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rowmatch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate rowwise match of a set of values — gen_rowmatch","text":"","code":"gen_rowmatch(data, cols, values)"},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rowmatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate rowwise match of a set of values — gen_rowmatch","text":"data data frame. cols <tidy-select> Columns search across. values list values match.","code":""},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rowmatch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate rowwise match of a set of values — gen_rowmatch","text":"binary integer vector indicating whether supplied value matched integer 1 (1L), otherwise returns integer 0 (0L).","code":""},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rowmatch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate rowwise match of a set of values — gen_rowmatch","text":"Parallelization supported via purrr::in_parallel().","code":""},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rowmatch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate rowwise match of a set of values — gen_rowmatch","text":"","code":"library(dplyr, warn.conflicts = FALSE) a <- tibble(   x = 1:3,   y = rep(NA, 3),   z = letters[1:3],   aa = rep(FALSE, 3) ) val <- list(1, NA, \"a\", FALSE) val2 <- list(5, NaN, \"d\", Inf) gen_rowmatch(a, values = val) #> [1] 1 1 1 b <- a %>%   mutate(     q = gen_rowmatch(., values = val),     r = gen_rowmatch(., values = val2)   ) b #> # A tibble: 3 × 6 #>       x y     z     aa        q     r #>   <int> <lgl> <chr> <lgl> <int> <int> #> 1     1 NA    a     FALSE     1     0 #> 2     2 NA    b     FALSE     1     0 #> 3     3 NA    c     FALSE     1     0"},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rowmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate rowwise maximum value — gen_rowmax","title":"Generate rowwise maximum value — gen_rowmax","text":"function returns rowwise maximum value data frame.","code":""},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rowmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate rowwise maximum value — gen_rowmax","text":"","code":"gen_rowmax(data, cols)"},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rowmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate rowwise maximum value — gen_rowmax","text":"data data frame. cols <tidy-select> Columns search across.","code":""},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rowmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate rowwise maximum value — gen_rowmax","text":"vector rowwise maximum value.","code":""},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rowmax.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate rowwise maximum value — gen_rowmax","text":"Parallelization supported via purrr::in_parallel().","code":""},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rowmax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate rowwise maximum value — gen_rowmax","text":"","code":"library(dplyr, warn.conflicts = FALSE) a <- tibble(   x = c(1, NA, 2),   y = c(NA, 3, NA),   z = c(4, NA, 5) ) gen_rowmax(a) #> [1] 4 3 5 gen_rowmax(a, everything()) #> [1] 4 3 5 gen_rowmax(a, starts_with(letters[24:25])) #> [1] 1 3 2 b <- a %>% mutate(q = gen_rowmax(.)) b #> # A tibble: 3 × 4 #>       x     y     z     q #>   <dbl> <dbl> <dbl> <dbl> #> 1     1    NA     4     4 #> 2    NA     3    NA     3 #> 3     2    NA     5     5"},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rowmin.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate rowwise minimum value — gen_rowmin","title":"Generate rowwise minimum value — gen_rowmin","text":"function returns rowwise minimum value data frame.","code":""},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rowmin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate rowwise minimum value — gen_rowmin","text":"","code":"gen_rowmin(data, cols)"},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rowmin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate rowwise minimum value — gen_rowmin","text":"data data frame. cols <tidy-select> Columns search across.","code":""},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rowmin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate rowwise minimum value — gen_rowmin","text":"vector rowwise minimum value.","code":""},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rowmin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate rowwise minimum value — gen_rowmin","text":"Parallelization supported via purrr::in_parallel().","code":""},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rowmin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate rowwise minimum value — gen_rowmin","text":"","code":"library(dplyr, warn.conflicts = FALSE) a <- tibble(   x = c(1, NA, 2),   y = c(NA, 3, NA),   z = c(4, NA, 5) ) gen_rowmin(a) #> [1] 1 3 2 gen_rowmin(a, everything()) #> [1] 1 3 2 gen_rowmin(a, starts_with(letters[25:26])) #> [1] 4 3 5 b <- a %>% mutate(q = gen_rowmin(.)) b #> # A tibble: 3 × 4 #>       x     y     z     q #>   <dbl> <dbl> <dbl> <dbl> #> 1     1    NA     4     1 #> 2    NA     3    NA     3 #> 3     2    NA     5     2"},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rownth.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate nth rowwise nonmissing value — gen_rownth","title":"Generate nth rowwise nonmissing value — gen_rownth","text":"function returns nth rowwise nonmissing value data frame.","code":""},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rownth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate nth rowwise nonmissing value — gen_rownth","text":"","code":"gen_rownth(data, cols, n)"},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rownth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate nth rowwise nonmissing value — gen_rownth","text":"data data frame. cols <tidy-select> Columns search across. n integer vector length 1 specifies position nth rowwise nonmissing value search . negative integer index end.","code":""},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rownth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate nth rowwise nonmissing value — gen_rownth","text":"vector nth rowwise nonmissing value. vector's type common type rowwise nonmissing values.","code":""},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rownth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate nth rowwise nonmissing value — gen_rownth","text":"Parallelization supported via purrr::in_parallel().","code":""},{"path":"https://gvelasq.github.io/mutagen/reference/gen_rownth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate nth rowwise nonmissing value — gen_rownth","text":"","code":"library(dplyr, warn.conflicts = FALSE) a <- tibble(   x = c(1, NA, 2),   y = c(NA, 3, NA),   z = c(4, NA, 5) ) gen_rownth(a, n = 1) #> [1] 1 3 2 gen_rownth(a, n = 2) #> [1]  4 NA  5 gen_rownth(a, all_of(letters[25:26]), n = 1) #> [1] 4 3 5 b <- a %>% mutate(q = gen_rownth(., n = 1), r = gen_rownth(., n = 2)) b #> # A tibble: 3 × 5 #>       x     y     z     q     r #>   <dbl> <dbl> <dbl> <dbl> <dbl> #> 1     1    NA     4     1     4 #> 2    NA     3    NA     3    NA #> 3     2    NA     5     2     5 c <-   a %>%   mutate(w = c(\"a\", TRUE, NA), .before = \"x\") %>%   mutate(q = gen_rownth(., n = 1), r = gen_rownth(., n = 2)) c # note that q and r are of type <chr> #> # A tibble: 3 × 6 #>   w         x     y     z q     r     #>   <chr> <dbl> <dbl> <dbl> <chr> <chr> #> 1 a         1    NA     4 a     1     #> 2 TRUE     NA     3    NA TRUE  3     #> 3 NA        2    NA     5 2     5"},{"path":"https://gvelasq.github.io/mutagen/reference/mutagen-package.html","id":null,"dir":"Reference","previous_headings":"","what":"mutagen: Extensions to dplyr's mutate — mutagen-package","title":"mutagen: Extensions to dplyr's mutate — mutagen-package","text":"Extensions dplyr's mutate.","code":""},{"path":[]},{"path":"https://gvelasq.github.io/mutagen/reference/mutagen-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"mutagen: Extensions to dplyr's mutate — mutagen-package","text":"Maintainer: Gustavo Velásquez gvelasq2github@gmail.com","code":""},{"path":"https://gvelasq.github.io/mutagen/news/index.html","id":"mutagen-development-version","dir":"Changelog","previous_headings":"","what":"mutagen (development version)","title":"mutagen (development version)","text":"Added gen_rowmax() (#18). Added gen_rowmin() (#17). Added gen_rownth() (#16). Added gen_rowlast() (#15). Added gen_rowfirst() (#14). Added gen_rowmatch() (#13). Added gen_rowcount() (#12). Added epigraph README (#10). Added parallelization README (#8, @ivelasq). Added R-universe badge README (#7). Added gen_na_listcol() (#6). Updated usethis helpers usethis 3.1.0 (#5). Added NEWS.md file track changes package (#5).","code":""},{"path":"https://gvelasq.github.io/mutagen/news/index.html","id":"new-contributors-development-version","dir":"Changelog","previous_headings":"","what":"New contributors","title":"mutagen (development version)","text":"@ivelasq made first contribution https://github.com/gvelasq/mutagen/pull/3. @delabj made first contribution https://github.com/gvelasq/mutagen/issues/1.","code":""}]
